\parser.y
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>
    #include "symbol_table.h"
    #include "parser.h"
    #include "quads.h"

    extern int yylineno;
    extern char* yytext;
    extern SymbolTable *symbol_table;
    extern int yylex();
    int yyerror (char* yaccProvidedMessage);
    int anonymus_function_counter = 0;

    void print_rule(const char* rule) {
        (void)0; // printf("Reduced by rule: %s\n", rule);
    }

    unsigned int checkScope = 0;        // 0 for global, 1 for local
    // int checkLoopDepth = 0;
    int inside_function_scope = 0;
    int inside_function_depth = 0;      // 0 for global, >0 for function scope
    static int first_brace_of_func = 0;
    int is_calling = 0;			        // reducing lvalue for function call 1, normal lvalues 0
    expr* current_function_expr = NULL;
    char* current_function_char = NULL;
    int semantic_errors = 0;
    static unsigned checkFuncDepth = 0;
    unsigned int returnlist = 0;


    typedef struct formal_argument_node {
        char *name;
        struct formal_argument_node *next;
    } formal_argument_node;

    formal_argument_node *create_node(char *name) {
        formal_argument_node *node = (formal_argument_node *)malloc(sizeof(formal_argument_node));
        node->name = strdup(name);
        node->next = NULL;
        return node;
    }

    formal_argument_node *append_argument(formal_argument_node *list, char *name) {
        formal_argument_node *node = create_node(name);
        node->next = list;
        return node;
    }

    void enter_scope() {
        // printf("Entering new scope: %u\n", checkScope);
        checkScope++;
    }

    static void exit_scope(void) {
        if (checkScope == 0) {
            return;
	    }
        // printf("Exiting  scope: %u\n", checkScope-1);
        deactivate_entries_from_curr_scope(symbol_table, checkScope-1);
        --checkScope;
    }

   /**
    * we use this function to reset loop depth when entering a new function
    */
    void enter_function_scope() {
        checkFuncDepth++;
        while (loopcounter() > 0) {
            pop_loopcounter();
        }
    }

    void exit_function_scope() {
        assert(checkFuncDepth > 0); // Add assertion to catch imbalanced calls
        checkFuncDepth--;
    }

    // Helper function to ensure an expression has a valid symbol
    expr* ensure_expr_has_symbol(expr* e) {
        if (!e) return NULL;
        
        // Skip constant types that don't need symbols
        if (e->type == constnum_e || e->type == conststring_e || e->type == constbool_e) {
            return e;
        }
        
        // Ensure the expression has a symbol
        if (!e->sym) {
            e->sym = newtemp();
        }
        
        return e;
    }

    /*  is_inc    : 1 → ++   , 0 → --   */
    /*  is_prefix : 1 → ++x  , 0 → x++  */
    static expr *incdec_lvalue(expr *lv, int is_inc, int is_prefix)
    {
        expr *one = newexpr_constnum(1);
        expr *ret = newexpr(var_e);      ret->sym = newtemp();

        /* -------------------- table element -------------------- */
        if (lv->type == tableitem_e) {
            expr *table = emit_iftableitem(lv->table);      /* may nest  */
            expr *index = lv->index;                        /* already OK */

            expr *old  = newexpr(var_e); old ->sym = newtemp();
            expr *newv = newexpr(var_e); newv->sym = newtemp();

            /* fetch current value */
            emit(tablegetelem, table, index, old , 0, yylineno);

            if (!is_prefix) /*  x++ / x--  -> result = old  */
                emit(assign, old , NULL, ret , 0, yylineno);

            /* compute new value  */
            emit(is_inc ? add : sub, old , one, newv, 0, yylineno);
            /* store it back */
            emit(tablesetelem, newv, index, table, 0, yylineno);

            if (is_prefix) /* ++x / --x  -> result = newv  */
                emit(assign, newv, NULL, ret , 0, yylineno);

            return ret;
        }

        /* -------------------- plain variable ------------------- */
        if (is_prefix) {  /* ++x / --x */
            emit(is_inc ? add : sub, lv, one, lv , 0, yylineno);
            emit(assign, lv , NULL, ret, 0, yylineno);
        } else {          /* x++ / x-- */
            emit(assign, lv , NULL, ret, 0, yylineno);
            emit(is_inc ? add : sub, lv, one, lv , 0, yylineno);
        }
        return ret;
    }

%}

%union {
    int intValue;
    double realValue;
    char* stringValue;
    struct formal_argument_node* arglist;
    struct SymbolTableEntry* symbol;    // for lvalue
    struct expr *expression;            // for expressions
}

%token <stringValue> IF ELSE WHILE FOR RETURN BREAK CONTINUE LOCAL TRUE FALSE NIL
%token <stringValue> PLUS MINUS MULTIPLY DIVIDE ASSIGNMENT EQUAL NOT_EQUAL GREATER_THAN GREATER_EQUAL LESS_THAN LESS_EQUAL
%token <stringValue> LEFT_PARENTHESIS RIGHT_PARENTHESIS
%token <stringValue> LEFT_BRACE RIGHT_BRACE LEFT_BRACKET RIGHT_BRACKET
%token <stringValue> SEMICOLON COMMA COLON
%token <stringValue> IDENTIFIER STRING
%token <intValue>    INTCONST
%token <realValue>   REALCONST
%token <stringValue> FUNCTION AND OR NOT MODULO PLUS_PLUS MINUS_MINUS EQUAL_EQUAL LESS GREATER
%token <stringValue> DOT_DOT DOT COLON_COLON PUNCTUATION OPERATOR

%type <expression>  funcdef
%type <arglist>     idlist formal_arguments
%type <expression> 	expr term primary const lvalue member assignexpr call elist normcall methodcall callsuffix
%type <intValue>	ifprefix elseprefix ifstmt stmt
%type <expression>  call_member indexed indexedelem objectdef
%type <intValue>    whilestmt
%type <expression> immediately_invoked_func_expr

%type <intValue> MP

%right ASSIGNMENT        /* = has less priority in compare with all the other */
%left OR
%left AND
%nonassoc EQUAL_EQUAL NOT_EQUAL
%nonassoc GREATER_THAN GREATER_EQUAL LESS_THAN LESS_EQUAL
%right NOT
%left  PLUS 
%left MINUS              /* changed to UMINUS for (x-y) - z */
%left MULTIPLY DIVIDE MODULO
%right PLUS_PLUS
%right MINUS_MINUS
%right DOT_DOT

%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE

%nonassoc UMINUS         /* unary minus operator */

// %expect 2

%start program

%%

MP : /* empty */ { $$ = nextquad(); }

program
    : stmt_list { print_rule("program -> stmt_list"); }
    ;

stmt_list
    : stmt stmt_list { print_rule("stmt_list -> stmt stmt_list"); }
    | /* empty */ { print_rule("stmt_list -> epsilon"); }
    ;

stmt
    : expr SEMICOLON 
        {
	    expr *val = convert_to_value($1);
            if($1->type == constnum_e) { 
                expr *temp = newexpr(var_e); 
                temp->sym = newtemp();
                emit(add, newexpr_constnum($1->numConst), NULL, temp, 0, yylineno); 
            }
            /* 

            NOTE:   turns out this is WRONG because then tests like this one: 
                    [   (function four(four){four=4;});   ]
                    fail with extra assign anonymous
            
            if ($1 && $1->type != nil_e && $1->type != constnum_e && $1->type != conststring_e && $1->type != constbool_e) {
                expr *temp = newexpr(var_e);
                temp->sym = newtemp();
                emit(assign, $1, NULL, temp, 0, yylineno);
            }
            */

            print_rule("stmt -> expr ;"); 
        }
    | error SEMICOLON { print_rule("stmt -> error ;"); yyerrok; }
    | ifstmt { print_rule("stmt -> ifstmt"); }
    | whilestmt { print_rule("stmt -> whilestmt"); }
    | forstmt { print_rule("stmt -> forstmt"); }
    | returnstmt { print_rule("stmt -> returnstmt"); }
    | break_stmt { print_rule("stmt -> break ;"); }
    | continue_stmt { print_rule("stmt -> continue ;"); }
    | block { print_rule("stmt -> block"); }
    | funcdef { print_rule("stmt -> funcdef"); }
    | error ';' { print_rule("stmt -> error ;"); yyerrok; }
    ;

expr
    : expr PLUS expr
    {
        expr *r = newexpr(arithexpr_e);
        r->sym = newtemp();
        // emit(add, $1, $3, r, 0, yylineno);
        emit(add, emit_iftableitem($1), emit_iftableitem($3), r, 0, yylineno);
        $$ = r;
    }
    | expr MINUS expr
    {
        expr *r = newexpr(arithexpr_e);
        r->sym = newtemp();
        // emit(sub, $1, $3, r, 0, yylineno);
        emit(sub, emit_iftableitem($1), emit_iftableitem($3), r, 0, yylineno);
        $$ = r;
    }
    | expr MULTIPLY expr
    {
        expr *r = newexpr(arithexpr_e);
        r->sym = newtemp();
        // emit(mul, $1, $3, r, 0, yylineno);
        emit(mul, emit_iftableitem($1), emit_iftableitem($3), r, 0, yylineno);
        $$ = r;
    }
    | expr DIVIDE expr
    {
        expr *r = newexpr(arithexpr_e);
        r->sym = newtemp();
        // emit(idiv, $1, $3, r, 0, yylineno);
        emit(idiv, emit_iftableitem($1), emit_iftableitem($3), r, 0, yylineno);
        $$ = r;
    }
    | expr MODULO expr
    {
        expr *r = newexpr(arithexpr_e);
        r->sym = newtemp();
        // emit(mod, $1, $3, r, 0, yylineno);
        emit(mod, emit_iftableitem($1), emit_iftableitem($3), r, 0, yylineno);
        $$ = r;
    }
    | expr GREATER_THAN expr
    {
        expr *r = newexpr(boolexpr_e);
        r->sym = newtemp();

        if (!$1) $1 = newexpr(nil_e);
        if (!$3) $3 = newexpr(nil_e);
        // Check if either operand is NULL or nil
        if (!$1 || !$3 || $1->type == nil_e || $3->type == nil_e) {
           
            emit(assign, newexpr_constbool(0), NULL, r, 0, yylineno);
        } else {
            // emit(if_greater, $1, $3, NULL, nextquad()+2, yylineno);
            expr *left = emit_iftableitem($1);
            expr *right = emit_iftableitem($3);
            emit(if_greater, left, right, NULL, nextquad()+2, yylineno);

            emit(jump, NULL, NULL, NULL, nextquad()+1, yylineno);
        }
        $$ = r;
    }
    | expr LESS_THAN expr
    {
        expr *r = newexpr(boolexpr_e);
        r->sym = newtemp();
        if (!$1) $1 = newexpr(nil_e);
        if (!$3) $3 = newexpr(nil_e);
        if (!$1 || !$3 || $1->type == nil_e || $3->type == nil_e) {
            emit(assign, newexpr_constbool(0), NULL, r, 0, yylineno);
        } else {
            // emit(if_less, $1, $3, NULL, nextquad()+2, yylineno);
            expr *left = emit_iftableitem($1);
            expr *right = emit_iftableitem($3);
            emit(if_less, left, right, NULL, nextquad()+2, yylineno);
            
            emit(jump, NULL, NULL, NULL, nextquad()+1, yylineno);
        }
        $$ = r;
    }
    | expr GREATER_EQUAL expr
    {
        expr *r = newexpr(boolexpr_e);
        r->sym = newtemp();
        if (!$1) $1 = newexpr(nil_e);
        if (!$3) $3 = newexpr(nil_e);
        if (!$1 || !$3 || $1->type == nil_e || $3->type == nil_e) {
            emit(assign, newexpr_constbool(0), NULL, r, 0, yylineno);
        } else {
            // emit(if_greatereq, $1, $3, NULL, nextquad()+2, yylineno);
            expr *left = emit_iftableitem($1);
            expr *right = emit_iftableitem($3);
            emit(if_greatereq, left, right, NULL, nextquad()+2, yylineno);

            emit(jump, NULL, NULL, NULL, nextquad()+1, yylineno);
        }
        $$ = r;
    }
    | expr LESS_EQUAL expr
    {
        expr *r = newexpr(boolexpr_e);
        r->sym = newtemp();
        if (!$1) $1 = newexpr(nil_e);
        if (!$3) $3 = newexpr(nil_e);
        if (!$1 || !$3 || $1->type == nil_e || $3->type == nil_e) {
            emit(assign, newexpr_constbool(0), NULL, r, 0, yylineno);
        } else {
            // emit(if_lesseq, $1, $3, NULL, nextquad()+2, yylineno);
            expr *left = emit_iftableitem($1);
            expr *right = emit_iftableitem($3);
            emit(if_lesseq, left, right, NULL, nextquad()+2, yylineno);

            emit(jump, NULL, NULL, NULL, nextquad()+1, yylineno);
        }
        $$ = r;
    }
    | expr EQUAL_EQUAL expr { $$ = make_eq_neq($1, $3, if_eq); }
    | expr NOT_EQUAL expr { $$ = make_eq_neq($1, $3, if_noteq);  }
    | expr OR expr { $$ = make_or($1, $3); }
    | expr AND expr { $$ = make_and($1, $3); }
    | assignexpr { $$ = $1; }
    | immediately_invoked_func_expr { $$ = $1; }
    | term       { $$ = $1; } 
    | expr DOT_DOT expr { print_rule("expr DOT_DOT expr"); $$ = newexpr(nil_e);}
    ;


assignexpr
    : lvalue ASSIGNMENT expr
    {
        expr *rhs = convert_to_value($3);

        if($1->type == programfunc_e || $1->type == libraryfunc_e) {
            fprintf(stderr,"Error: Symbol '%s' is not a valid l-value (line %d)\n",
                    $1->sym->name, yylineno);
        }

	rhs = emit_iftableitem(rhs);

        if ($1->type == tableitem_e) {
            /* Evaluate the TABLE part once, cache in temp */
            expr *tbl = emit_iftableitem($1->table);
           /*  tbl[index] := rhs  */
            emit(tablesetelem, tbl, $1->index, rhs, 0, yylineno);

            /*  result = tbl[index]  (so the assignment is an expression) */
            expr *result = newexpr(var_e);  result->sym = newtemp();
            emit(tablegetelem, tbl, $1->index, result, 0, yylineno);
            $$ = result;
        
        } else {
            // emit: a := rhs
            // regular var assing
            emit(assign, rhs, NULL, $1, 0, yylineno);

            // create a temp to hold the result
            expr *final = newexpr(var_e);
            final->sym = newtemp();
            emit(assign, $1, NULL, final, 0, yylineno);
            $$ = final;
        }
    }
;

/*
op
    : plus_op expr       %prec PLUS
    | minus_op expr      %prec MINUS
    | mult_op expr       %prec MULTIPLY
    | div_op expr        %prec DIVIDE
    | mod_op expr        %prec MODULO
    | greaterthan_op expr %prec GREATER_THAN
    | greaterequal_op expr %prec GREATER_EQUAL
    | lessthan_op expr     %prec LESS_THAN
    | lessequal_op expr    %prec LESS_EQUAL
    | eqeq_op expr       %prec EQUAL_EQUAL
    | noteq_op expr      %prec NOT_EQUAL
    | and_op expr        %prec AND
    | or_op expr         %prec OR
    ;

    plus_op:            PLUS { print_rule("op -> +"); };
    minus_op:           MINUS { print_rule("op -> -"); };
    mult_op:            MULTIPLY { print_rule("op -> *"); };
    div_op:             DIVIDE { print_rule("op -> /"); };
    mod_op:             MODULO { print_rule("op -> %"); };
    greaterthan_op:     GREATER_THAN { print_rule("op -> >"); };
    greaterequal_op:    GREATER_EQUAL { print_rule("op -> >="); };
    lessthan_op:        LESS_THAN { print_rule("op -> <"); };
    lessequal_op:       LESS_EQUAL { print_rule("op -> <="); };
    eqeq_op:            EQUAL_EQUAL { print_rule("op -> =="); };
    noteq_op:           NOT_EQUAL { print_rule("op -> !="); };
    and_op:             AND { print_rule("op -> and"); };
    or_op:              OR { print_rule("op -> or"); };
*/



term
    : LEFT_PARENTHESIS expr RIGHT_PARENTHESIS { print_rule("term -> ( expr )"); }
    | MINUS expr %prec UMINUS 
    { 
        expr *r = newexpr(arithexpr_e); 
        r->sym = newtemp(); 
        emit(uminus, $2, NULL, r, 0, yylineno); 
        $$ = r; 
        print_rule("term -> - expr"); 
    }
    | NOT expr { $$ = make_not($2); }
    | PLUS_PLUS lvalue 
    { 
        /*
        if ($2->type == programfunc_e || $2->type == libraryfunc_e) fprintf(stderr,"Error: Symbol '%s' is not a modifiable lvalue (line %d).\n", $2->sym->name, yylineno); 
        expr *r = newexpr(var_e); 
        r->sym = newtemp(); 
        emit(assign, $2, NULL, r, 0, yylineno); 
        emit(add, $2, newexpr_constnum(1), $2, 0, yylineno); 
        $$ = r; 
        */
        $$ = incdec_lvalue($2, 1, 1);
    }
    | lvalue PLUS_PLUS 
    { 
        /*
        if ($1->type == programfunc_e || $1->type == libraryfunc_e) fprintf(stderr,"Error: Symbol '%s' is not a modifiable lvalue (line %d).\n", $1->sym->name, yylineno); 
        expr *r = newexpr(var_e); 
        r->sym = newtemp(); 
        emit(assign, $1, NULL, r, 0, yylineno); 
        emit(add, $1, newexpr_constnum(1), $1, 0, yylineno); 
        $$ = r; 
        */
        $$ = incdec_lvalue($1, 1, 0); 
    }
    | MINUS_MINUS lvalue 
    { 
        /*
        if ($2->type == programfunc_e || $2->type == libraryfunc_e) fprintf(stderr, "Error: Symbol '%s' is not a modifiable lvalue (line %d).\n", $2->sym->name, yylineno);
        expr *r = newexpr(var_e); 
        r->sym = newtemp(); 
        emit(assign, $2, NULL, r, 0, yylineno); 
        emit(sub, $2, newexpr_constnum(1), $2, 0, yylineno); 
        $$ = r; 
        */
        $$ = incdec_lvalue($2, 0, 1);
    }
    | lvalue MINUS_MINUS 
    { 
        /*
        if ($1->type == programfunc_e || $1->type == libraryfunc_e) fprintf(stderr, "Error: Symbol '%s' is not a modifiable lvalue (line %d).\n", $1->sym->name, yylineno); 
        expr *r = newexpr(var_e); 
        r->sym = newtemp(); 
        emit(assign, $1, NULL, r, 0, yylineno); 
        emit(sub, $1, newexpr_constnum(1), $1, 0, yylineno); 
        $$ = r;
        */
        $$ = incdec_lvalue($1, 0, 0); 
    }
    | primary 
    { 
        print_rule("term -> primary"); 
    }
    ;

primary
    : lvalue { print_rule("primary -> lvalue"); }
    | call { print_rule("primary -> call"); }
    | objectdef { print_rule("primary -> objectdef"); }
    | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS { print_rule("primary -> ( funcdef )"); $$ = $2;}
    | const { print_rule("primary -> const"); }
    ;

lvalue
    : IDENTIFIER
      {
        SymbolTableEntry *sym = lookup_symbol(symbol_table, $1, checkScope, inside_function_scope);
        if (!sym) {
            sym = insert_symbol(symbol_table, $1, (checkScope==0)? GLOBAL : LOCAL_VAR, yylineno, checkScope);
            if (!sym) {
                fprintf(stderr, "Error: Failed to insert symbol '%s' (line %d)\n", $1, yylineno);
                semantic_errors++;
                $$ = newexpr(nil_e);
            } else {
                $$ = lvalue_expr(sym);
            }
        } else {
            $$ = lvalue_expr(sym);
        }
      }

    | LOCAL IDENTIFIER
    {
        SymbolTableEntry *sym = insert_symbol(symbol_table, $2, LOCAL_VAR, yylineno, checkScope);
        if (!sym) {
            fprintf(stderr, "Error: Failed to insert symbol '%s' (line %d)\n", $2, yylineno);
            semantic_errors++;
            $$ = newexpr(nil_e);
        } else {
            $$ = lvalue_expr(sym);
        }
    }
    | COLON_COLON IDENTIFIER
    {
        SymbolTableEntry *sym = lookup_symbol(symbol_table, $2, 0, 0);
        if (!sym) {
            fprintf(stderr, "Error: Symbol '%s' not found in global scope (line %d)\n", $2, yylineno);
            semantic_errors++;
            $$ = newexpr(nil_e); // Return a safe nil expression instead of using NULL
        } else {
            $$ = lvalue_expr(sym);
        }
    }
    | member { print_rule("lvalue -> member"); }
    ;

const
    : INTCONST    { $$ = newexpr_constnum($1);         }
    | REALCONST   { $$ = newexpr_constnum($1);         }
    | STRING      { $$ = newexpr_conststring($1);      }
    | NIL         { $$ = newexpr(nil_e);               }
    | TRUE       { $$ = newexpr_constbool(1);         }
    | FALSE      { $$ = newexpr_constbool(0);         }
;

member
    : lvalue DOT IDENTIFIER 
    { 
        expr* result = newexpr(tableitem_e);
        result->sym = newtemp();
        result->index = newexpr_conststring($3);
        result->table = $1; // new
        //emit(tablegetelem, $1, result->index, result, 0, yylineno);
        $$ = result;
        print_rule("member -> lvalue . IDENTIFIER"); 
    }
    | lvalue LEFT_BRACKET expr RIGHT_BRACKET 
    { 
        expr* result = newexpr(tableitem_e);
        result->sym = newtemp();
        result->index = $3;
        result->table = $1; // new
        //emit(tablegetelem, $1, result->index, result, 0, yylineno);
        $$ = result;
        print_rule("member -> lvalue [ expr ]"); 
    }
    | call_member { $$ = $1; print_rule("member -> call_member"); }
    ;

/* Helpful for member */
call_member
    : call DOT IDENTIFIER 
    { 
        expr* result = newexpr(tableitem_e);
        result->sym = newtemp();
        result->index = newexpr_conststring($3);
        result->table = $1; // new
        //emit(tablegetelem, $1, result->index, result, 0, yylineno);
        $$ = result;
        print_rule("call_member -> call . IDENTIFIER"); 
    }
    | call LEFT_BRACKET expr RIGHT_BRACKET 
    { 
        expr* result = newexpr(tableitem_e);
        result->sym = newtemp();
        result->index = $3;
        result->table = $1;  // new
        //emit(tablegetelem, $1, result->index, result, 0, yylineno);
        $$ = result;
        print_rule("call_member -> call [ expr ]"); 
    }
    ;

call
    : call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS 
    { 
        $$ = make_call_expr($1, $3); // $1 = previous call expr, $3 = argument list
        print_rule("call -> call (elist)"); 
        }
    | lvalue {
        is_calling = 1;
        } callsuffix { 
        is_calling = 0;
        $$ = make_call_expr($1, $3);
        print_rule("call -> lvalue callsuffix"); 
    }
    /*  | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS { 
        if (!$2) { debug(1, "Warning: Invalid function definition at line %d\n", yylineno); $$ = newexpr(nil_e); // Return a safe nil expression
        } else { $$ = make_call_expr($2, $5); } print_rule("call -> ( funcdef ) ( elist )"); }    */
    ;

immediately_invoked_func_expr
    : LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS {
        // Add safety check for anonymous function calls
        if (!$2) {
            debug(1, "Warning: Invalid function definition at line %d\n", yylineno);
            $$ = newexpr(nil_e); // Return a safe nil expression
        } else {

            // ensure funcdef has a symbol
            if (!$2->sym) {
                $2->sym = newtemp();
            }

            $$ = make_call_expr($2, $5);
        }
        print_rule("call -> ( funcdef ) ( elist )"); 
    }
;


callsuffix
    : normcall { print_rule("callsuffix -> normcall"); }
    | methodcall { print_rule("callsuffix -> methodcall"); }
    ;

normcall
    : LEFT_PARENTHESIS elist RIGHT_PARENTHESIS { $$ = $2; print_rule("normcall -> ( elist )"); }
    ;

methodcall
    : lvalue DOT_DOT IDENTIFIER LEFT_PARENTHESIS elist RIGHT_PARENTHESIS { $$ = create_expr_list($1 , $5); print_rule("methodcall -> lvalue .. IDENTIFIER ( elist )"); }
    ;

elist
    : expr 
    { 
        if ($1 && !$1->sym && $1->type != constnum_e && $1->type != conststring_e && $1->type != constbool_e)
            $1->sym = newtemp();
        $$ = $1;
        print_rule("elist -> expr"); 
        }
    | expr COMMA elist { 
        if ($1 && !$1->sym && $1->type != constnum_e && $1->type != conststring_e && $1->type != constbool_e)
            $1->sym = newtemp();
        $$ = create_expr_list($1, $3);
        print_rule("elist -> expr , elist"); 
        }
    | /* empty */ { 
        $$ = NULL;
        print_rule("elist -> epsilon");
    }
;

objectdef
    : LEFT_BRACKET elist RIGHT_BRACKET 
    { 
        expr* t = newexpr(newtable_e);
        t->sym = newtemp();
        emit(tablecreate, NULL, NULL, t, 0, yylineno);
        
        // Add elements from elist
        int i = 0;
        expr* curr = $2;
        while(curr) {
            // --- NEW CODE: Ensure curr has a symbol! ---
            if (!curr->sym) curr->sym = newtemp();

            expr* index = newexpr_constnum(i++);
            emit(tablesetelem, curr, index, t, 0, yylineno);
            curr = curr->next;
        }
        
        $$ = t;
        print_rule("objectdef -> [ elist ]"); 
    }
    | LEFT_BRACKET indexed RIGHT_BRACKET 
    { 
        expr* t = newexpr(newtable_e);
        t->sym = newtemp();
        emit(tablecreate, NULL, NULL, t, 0, yylineno);

        // Process indexed elements
        expr* curr = $2;
        while(curr) {
            // --- NEW CODE: Defensive checks ---
            if (!curr->args) {
                fprintf(stderr, "ERROR: indexedelem->args is NULL at line %d\n", yylineno);
                curr = curr->next;
                continue;
            }
            if (!curr->index) {
                fprintf(stderr, "ERROR: indexedelem->index is NULL at line %d\n", yylineno);
                curr = curr->next;
                continue;
            }
            // --- Ensure both have symbols! ---
            if (!curr->args->sym) curr->args->sym = newtemp();
            if (!curr->index->sym && curr->index->type != constnum_e && curr->index->type != conststring_e) curr->index->sym = newtemp();

            emit(tablesetelem, curr->args, curr->index, t, 0, yylineno);
            curr = curr->next;
        }
        
        $$ = t;
        print_rule("objectdef -> [ indexed ]"); 
    }
;

indexed
    : indexedelem { $$ = $1; print_rule("indexed -> indexedelem"); }
    | indexedelem COMMA indexed 
    { 
        // Link the current indexedelem with the rest of the indexed list
        $1->next = $3;
        $$ = $1;
        print_rule("indexed -> indexedelem, indexed"); 
    }
    ;

indexedelem
    : LEFT_BRACE expr COLON expr RIGHT_BRACE 
    { 
        expr* elem = newexpr(var_e);
        elem->sym = newtemp();
        elem->index = $2;
        elem->args = $4;
        elem->next = NULL;

        // --- New: Make sure $2 and $4 have sym ---
        if (elem->index && !elem->index->sym &&
            elem->index->type != constnum_e &&
            elem->index->type != conststring_e) {
            elem->index->sym = newtemp();
        }
        if (elem->args && 
        elem->args->type != constnum_e &&
        elem->args->type != conststring_e &&
        elem->args->type != constbool_e &&
        !elem->args->sym) { elem->args->sym = newtemp();
        }
        $$ = elem;
        print_rule("indexedelem -> { expr : expr }"); 
    }
;

formal_arguments
    : idlist { $$ = $1; }
    ;

funcdef
  : FUNCTION IDENTIFIER
    {
        /*SymbolTableEntry *func_sym = insert_symbol(symbol_table, $2, USER_FUNCTION, yylineno, checkScope);
        expr* f = newexpr(programfunc_e);
        f->sym = func_sym;
	    current_function_expr = f;
        //$<expression>3 = e;

        enter_scope();
        ++inside_function_depth;
        inside_function_scope = 1;
        first_brace_of_func = 1;  // Indicates the first brace of the function
	    enter_function_scope();   // for loop */

        SymbolTableEntry *func_sym = insert_symbol(symbol_table, $2, USER_FUNCTION, yylineno, checkScope);
        expr* f = newexpr(programfunc_e);
        f->sym = func_sym;
	    current_function_expr = f;
        //$<expression>3 = e;

        emit(jump, NULL, NULL, NULL, nextquad() + 2, yylineno);
        emit(funcstart, f, NULL, NULL, 0, yylineno);

	    returnlist = 0;

        enter_scope();
        ++inside_function_depth;
        inside_function_scope = 1;
        first_brace_of_func = 1;  // Indicates the first brace of the function
	    enter_function_scope();   // for loop

        $<expression>$ = f;
    }
    LEFT_PARENTHESIS formal_arguments RIGHT_PARENTHESIS
    {
        // we insert the formal arguments here for normal functions
        formal_argument_node* arg = $5;
        while (arg != NULL) {
            insert_symbol(symbol_table, arg->name, ARGUMENT, yylineno, checkScope);
            arg = arg->next;
        }
    }
    block
    {
        /*--inside_function_depth;
        exit_scope();
        exit_function_scope();      // for loop
        $$ = $<expression>3;        // use previously stored expr*
        */

        --inside_function_depth;
        exit_scope();
        exit_function_scope();      // for loop
        emit(funcend, $<expression>3, NULL, NULL, 0, yylineno); // emit funcend

        // new
        patchlist(returnlist, nextquad());

        $$ = $<expression>3;        // use previously stored expr*
    }
    | FUNCTION
    {
        char *anonymous_name = malloc(32);
        if (!anonymous_name) {
            fprintf(stderr, "Memory allocation failed\n");
            exit(EXIT_FAILURE);
        }
        sprintf(anonymous_name, "$%d", anonymus_function_counter++);
        SymbolTableEntry *func_sym = insert_symbol(symbol_table, anonymous_name, USER_FUNCTION, yylineno, checkScope);
        
        // Only free if insert_symbol makes a deep copy of the name
        free(anonymous_name);

        expr* func_expr = newexpr(programfunc_e);
        func_expr->sym = func_sym;

        emit(jump, NULL, NULL, NULL, nextquad() + 2, yylineno);
        emit(funcstart, func_expr, NULL, NULL, 0, yylineno);

        // new
        returnlist = 0;

        current_function_expr = func_expr;  // we save this function as current
        enter_scope();
        ++inside_function_depth;
        first_brace_of_func = 1;
        enter_function_scope();             // for loop
        $<expression>$ = func_expr;         // and then pass it to later rules

    }
    LEFT_PARENTHESIS formal_arguments RIGHT_PARENTHESIS
    {
        formal_argument_node* arg = $4;
        while (arg != NULL) {
            insert_symbol(symbol_table, arg->name, ARGUMENT, yylineno, checkScope);
            arg = arg->next;
        }
    }
    block
    {
        --inside_function_depth;
	    exit_function_scope();  // for loop
        exit_scope();

        emit(funcend, $<expression>2, NULL, NULL, 0, yylineno); // emit funcend after block

	    // new
        patchlist(returnlist, nextquad());

        $$ = $<expression>2;    // rtrn func_expr
        print_rule("funcdef -> function ( idlist ) block");
    }
    ;

idlist
    : IDENTIFIER { 
        print_rule("idlist -> IDENTIFIER"); 
        $$ = create_node($1);
    }
    | IDENTIFIER COMMA idlist { 
        print_rule("idlist -> IDENTIFIER , idlist"); 
        $$ = append_argument($3, $1);
    }
    | /* empty */ { print_rule("idlist -> epsilon");
        $$ = NULL;
    }
    ;

ifstmt
    : ifprefix stmt %prec LOWER_THAN_ELSE
        {
        patchlabel($1, nextquad());
        print_rule("ifstmt -> if ( expr ) stmt");
        }
    | ifprefix stmt elseprefix stmt
        {
        patchlabel($1, $3);
        //patchlabel($2, nextquad()); // $2 is stmt not a quad number so we use $3
        patchlabel($3, nextquad());
        print_rule("ifstmt -> if ( expr ) stmt else stmt");
        }
    ;

ifprefix
    : IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
    {
        // Ensure expr has a symbol
        $3 = ensure_expr_has_symbol($3);

	    // we ensure the expression is in boolean form
        if ($3->type != boolexpr_e) {
            expr* true_const = newexpr_constbool(1);
            emit(if_eq, $3, true_const, NULL, nextquad() + 2, yylineno);
        } else {
            emit(if_eq, $3, NULL, NULL, nextquad() + 2, yylineno);
        }

	    // we emit jump and record its position for patching
        emit(jump, NULL, NULL, NULL, 0, yylineno);
        $$ = nextquad() - 1;

    }

elseprefix
    : ELSE
    {
        $$ = nextquad();
        emit(jump, NULL, NULL, NULL, 0, yylineno);
    }
    ;

whilestmt
    : WHILE MP
      LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
      {
          push_loopcounter();

          // Ensure expr has a symbol
          $4 = ensure_expr_has_symbol($4);

          /* IF cond == TRUE jump somewhere (patch later) */
          emit(if_eq, $4, newexpr_constbool(1), NULL, 0, yylineno);
          emit(jump , NULL, NULL, NULL,0, yylineno);  /* JFALSE */

          $<intValue>$ = nextquad() - 2; /* $6 : IF-quad id */
      }
      MP                                         
      stmt
      {
          emit(jump, NULL, NULL, NULL, $2, yylineno);      /* back-edge  */

          /* patch IF-TRUE  → body, IF-FALSE → exit */
          patchlabel($<intValue>6    , $7);
          patchlabel($<intValue>6 + 1, nextquad());

          lc_stack_t *loop = current_loop();
          if (loop) {
              patchlist(loop->breaklist, nextquad());  /* break    → exit */
              patchlist(loop->contlist, $2);           /* continue */
          }

          pop_loopcounter();
      }
    ;



forstmt
    : FOR
        { push_loopcounter(); enter_scope(); }     /* housekeeping     */
      LEFT_PARENTHESIS
      elist SEMICOLON                              /* expr1 (init)     */
      MP
      expr                                         /* expr2 (cond)     */
        {
            // Ensure expr has a symbol
            $7 = ensure_expr_has_symbol($7);

            emit(if_eq, $7, newexpr_constbool(1), NULL, 0, yylineno);
            emit(jump , NULL, NULL, NULL,           0, yylineno);  /* JFALSE */

            $<intValue>$ = nextquad() - 2; /* $8 : IF-quad id */
        }
      SEMICOLON
      MP                                       
      elist                                      
        {
            emit(jump, NULL, NULL, NULL, $6, yylineno);   
        }
      RIGHT_PARENTHESIS
      MP                                          
      stmt
            {
          int ifQuad = $<intValue>8;              /* saved IF-quad   */

          patchlabel(ifQuad    , $<intValue>12);  /* TRUE  → body    */
          patchlabel(ifQuad + 1, nextquad());     /* FALSE → exit    */

          emit(jump, NULL, NULL, NULL, $<intValue>9, yylineno); 

          lc_stack_t *loop = current_loop();
          if (loop) {
              patchlist(loop->breaklist, nextquad()); /* break  → exit   */
              patchlist(loop->contlist,  $<intValue>9);/* cont */
          }

          exit_scope();
          pop_loopcounter();
      }
    ;



returnstmt
    : RETURN SEMICOLON
    {
        if (inside_function_depth < 1) {
            fprintf(stderr, "Error: 'return' used outside of any function (line %d)\n", yylineno);
            semantic_errors++;
        }
        print_rule("returnstmt -> return ;");
    }
    | RETURN expr SEMICOLON
    {
        if (inside_function_depth < 1) {
            fprintf(stderr, "Error: 'return' used outside of any function (line %d)\n", yylineno);
            semantic_errors++;
        }
        expr *val = convert_to_value($2);
        emit(ret, val, NULL, NULL, 0, yylineno);

 	    // new
        emit(jump, NULL, NULL, NULL, 0, yylineno);  // label to patch later
        returnlist = mergelist(returnlist, newlist(nextquad() - 1));
        // new end

        print_rule("returnstmt -> return expr ;");
    }
    ;

break_stmt
    : BREAK SEMICOLON 
    {
        //if (checkLoopDepth < 1) { 
        if (loopcounter() == 0) {
            fprintf(stderr, "Error: 'break' used outside of any loop (line %d)\n", yylineno);
            semantic_errors++;
        } 
        print_rule("break_stmt -> break ;"); 
    }
    {
        if (loopcounter() == 0) {
            // Skip patching if not in a loop
            fprintf(stderr, "Error: 'break' used outside of any loop (line %d)\n", yylineno);
            semantic_errors++;
        } else {
            emit(jump, NULL, NULL, NULL, 0, yylineno); // emit jump to break
            struct lc_stack_t *n = current_loop();
            if (n) { // Add safety check
                n->breaklist = mergelist(n->breaklist, newlist(nextquad() - 1));
            }
        }
    }
    ;

continue_stmt
    : CONTINUE SEMICOLON 
    {
        //if (checkLoopDepth < 1) { 
        if (loopcounter() == 0) {
            fprintf(stderr, "Error: 'continue' used outside of any loop (line %d)\n", yylineno);
            semantic_errors++;
        } 
        print_rule("continue_stmt -> continue ;"); 
    }
    {
        if (loopcounter() == 0) {
            // Skip patching if not in a loop
            fprintf(stderr, "Error: 'continue' used outside of any loop (line %d)\n", yylineno);
            semantic_errors++;
        } else {
            emit(jump, NULL, NULL, NULL, 0, yylineno); // emit jump to break
            struct lc_stack_t *n = current_loop();
            if (n) { // Add safety check
                n->contlist = mergelist(n->contlist, newlist(nextquad() - 1));
            }
        }
    }
    ;

block
    : LEFT_BRACE { enter_scope(); } stmt_list RIGHT_BRACE { exit_scope(); print_rule("block -> { stmt_list }"); }
    ;

%%

int yyerror (char* yaccProvidedMessage)
{
    fprintf(stderr, "%s: at line %d, before token: '%s'\n", yaccProvidedMessage, yylineno, yytext);
    fprintf(stderr, "unexpected token: %s with ascii: %d\n", yytext, yytext[0]);
    fprintf(stderr, "INPUT NOT VALID\n");
    return 1;
}
\main.c
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

#include <stdio.h>
#include <signal.h>
#include <stdarg.h>

#include "quads.h"
#include "symbol_table.h"
 
extern unsigned int checkScope;
extern int yyparse();        
extern FILE* yyin;
extern int semantic_errors;
extern unsigned total;
extern unsigned int currQuad;
 
SymbolTable *symbol_table;
quad* quads = (quad*) 0;
 
void debug(int level, const char* fmt, ...) {
    va_list args;
    va_start(args, fmt);

    if (level > 0) {
        fprintf(stderr, "[DEBUG] ");
        vfprintf(stderr, fmt, args);
    }

    va_end(args);
}

// Signal handler for segmentation faults
void segfault_handler(int sig) {
    fprintf(stderr, "Caught segmentation fault! Current quad: %d\n", currQuad);
    exit(EXIT_FAILURE);
}
 
int main(int argc, char **argv) {
    // Add signal handler for segmentation faults
    signal(SIGSEGV, segfault_handler);
     
    if (argc > 2) {
        fprintf(stderr, "Usage: %s [inputfile]\n", argv[0]);
        return 1;
    }
 
    if (argc == 2) {
        yyin = fopen(argv[1], "r");
        if (!yyin) {
            perror(argv[1]);
            return 1;
        }
    }
     
    // Initialize globals safely
    quads = NULL;
    total = 0;
    currQuad = 0;
     
    symbol_table = create_symbol_table();
    if (!symbol_table) {
        fprintf(stderr, "Failed to create symbol table\n");
        return 1;
    }
 
    if (yyparse() == 0) {
        if (semantic_errors > 0) {
            fprintf(stderr, "\nParsing completed with %d semantic error(s).\n", semantic_errors);
        } else {
            printf("Parsing completed successfully.\n");
        }
    } else {
        fprintf(stderr, "Parsing failed.\n");
    }
 
    // Only print quads if we have valid quads
    if (quads && currQuad > 0) {
        print_quads(stdout);
    } else {
        fprintf(stderr, "No quads to print or empty quads array\n");
    }
 
    free_symbol_table(symbol_table);
    if (argc == 2 && yyin) {
        fclose(yyin);
    }
 
    return 0;
} 
\quads.h
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

 #ifndef QUADS_H
#define QUADS_H

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdarg.h>

#include "symbol_table.h"

extern int yylineno;

#define EXPAND_SIZE 1024
#define CURR_SIZE (total * sizeof(quad))
#define NEW_SIZE (EXPAND_SIZE * sizeof(quad) + CURR_SIZE)


void debug(int level, const char* fmt, ...);

typedef enum iopcode {
    assign, add, sub, mul, idiv, mod,
    uminus, and, or, not,
    if_eq, if_noteq, if_lesseq, if_greatereq, if_less, if_greater,
    jump, call, param, ret, getretval,
    funcstart, funcend, tablecreate, tablegetelem, tablesetelem
} iopcode;

typedef enum expr_t {
    var_e, tableitem_e,
    programfunc_e, libraryfunc_e,
    arithexpr_e, boolexpr_e, assignexpr_e, newtable_e,
    constnum_e, constbool_e, conststring_e,
    nil_e, call_e /* call_e new 19 may */ 
} expr_t;

typedef struct expr {
    expr_t type;
    SymbolTableEntry* sym;
    struct expr* index;
    struct expr* table;   
    double numConst;
    char* strConst;
    unsigned char boolConst;
    struct expr *args;
    struct expr* next;
    int truelist;
    int falselist;
} expr;

typedef struct quad {
    iopcode op;
    expr* result;
    expr* arg1;
    expr* arg2;
    unsigned label;
    unsigned line;
} quad;


/* quads.h – put this just after the #includes */
#ifndef LC_STACK_DEFINED
#define LC_STACK_DEFINED

typedef struct lc_stack_t {
        struct lc_stack_t *next;
        unsigned           counter;     /* for nested-loop depth (any value is fine) */
        int                breaklist;   /* list-head of pending ‘break’ jumps */
        int                contlist;    /* list-head of pending ‘continue’ jumps */
} lc_stack_t;

#endif    /* LC_STACK_DEFINED */

/* helper that the parser uses */
lc_stack_t *current_loop(void);

// Scope and offset management
extern unsigned programVarOffset;
extern unsigned functionLocalOffset;
extern unsigned formalArgOffset;
extern unsigned scopeSpaceCounter;
extern unsigned total;
extern unsigned int currQuad;
extern quad* quads;
extern SymbolTable* symbol_table;

// Function declarations
void expand(void);
void emit(iopcode op, expr* arg1, expr* arg2, expr* result, unsigned label, unsigned line);
unsigned nextquad(void);
void patchlabel(unsigned quadNo, unsigned label);

scopespace_t currscopespace(void);
unsigned currscopeoffset(void);
void inccurrscopeoffset(void);
void enterscopespace(void);
void exitscopespace(void);

expr* lvalue_expr(SymbolTableEntry* sym);
expr* newexpr(expr_t t);
expr* newexpr_constnum(double i);
expr* newexpr_conststring(char* s);
expr* newexpr_constbool(unsigned int b);
char* newtempname(void);
SymbolTableEntry* newtemp(void);
void resettemp(void);
unsigned int istempname(char* s);
unsigned int istempexpr(expr* e);

expr* make_call_expr(expr* func_expr, expr* args);
expr* create_expr_list(expr* head, expr* tail);

expr* emit_iftableitem(expr* e);
void print_quads(FILE* f);

// Statement list structure for break/continue
typedef struct stmt_t {
    int breaklist;
    int contlist;
} stmt_t;

void make_stmt(stmt_t* s);

// Patch lists
int newlist(int quadNo);
int mergelist(int list1, int list2);
void patchlist(int list, int label);

expr* convert_to_value(expr* e);
expr* convert_to_bool(expr* e);
expr* make_not(expr* e);
expr* make_or(expr* e1, expr* e2);
expr* make_and(expr* e1, expr* e2);
expr* make_eq_neq(expr* e1, expr* e2, iopcode op);

#endif

#ifndef LOOP_CONTROL_H
#define LOOP_CONTROL_H

unsigned loopcounter(void);
void push_loopcounter(void);
void pop_loopcounter(void);

#endif

\al.l
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

%{
#include "parser.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
extern int yylineno;

#define token_string_compare(val1, val2) strcmp((val1), (val2))

void print_unclosed_comment_error();
void push_string(int line);
int pop_string();
int isStringStackEmpty();
void print_unclosed_string_error();

typedef struct StackNode {
    int line;
    int has_nested;
    struct StackNode* next;
} StackNode;

typedef struct Stack {
    StackNode* top;
} Stack;

Stack commentStack;
Stack stringStack;

/* Token Structure */
typedef struct alpha_token_t {
    unsigned int line_number;
    unsigned int token_number;
    char *content;
    char *token_type;
    char *data_type;
    struct alpha_token_t *next_t;
} alpha_token_t;

alpha_token_t* list_head = NULL;
int counter_tk_number = 0;
int comment_line_start = 0;
int comment_line_end = 0;
int comment_nested = 0;
int string_line_start = 0;

/* Function to insert tokens into the list */
void insert_token(int line, const char* text, const char* type, const char* type_of_data) {
    alpha_token_t* new_token = (alpha_token_t*)malloc(sizeof(alpha_token_t));
    new_token->line_number = line;
    new_token->token_number = ++counter_tk_number;
    new_token->content = strdup(text);
    new_token->token_type = strdup(type);
    new_token->data_type = strdup(type_of_data);
    new_token->next_t = NULL;

    if (!list_head) {
        list_head = new_token;
    } else {
        alpha_token_t* temp = list_head;
        while (temp->next_t)
            temp = temp->next_t;
        temp->next_t = new_token;
    }
}

void initStack(Stack* stack) {
    stack->top = NULL;
}

void push(Stack* stack, int line) {
    StackNode* newNode = (StackNode*)malloc(sizeof(StackNode));
    if (!newNode) {
        fprintf(stderr, "Memory allocation error in push()\n");
        exit(EXIT_FAILURE);
    }
    newNode->line = line;
    newNode->has_nested = 0;	// in the begining default is that these is no nested comment 
    newNode->next = stack->top;
    stack->top = newNode;
}

int pop(Stack* stack) {
    if (!stack->top) return -1;  // Stack empty
    StackNode* temp = stack->top;
    int line = temp->line;
    stack->top = stack->top->next;
    free(temp);
    return line;
}

int isStackEmpty(Stack* stack) {
    return stack->top == NULL;
}

void freeStack(Stack* stack) {
    while (!isStackEmpty(stack)) {
        pop(stack);
    }
}

/* Free Token List */
void free_token_list() {
    alpha_token_t* temp;
    while (list_head) {
        temp = list_head;
        list_head = list_head->next_t;
        free(temp->content);
        free(temp->token_type);
        free(temp->data_type);
        free(temp);
    }
}

%}

%option yylineno
%option noyywrap

/* for block comments, before %% */
%x COMMENT

/* for strings, before %% */
%x STRING_MODE

/* Regular Expressions */
id          [a-zA-Z][a-zA-Z_0-9]*
intconst    (0[xX][0-9A-Fa-f]+)|([0-9]+)
realconst   [0-9]+\.[0-9]+(e[+-]?[0-9]+)?
string      \"([^\\n"\\]|\\t|\\n|\\\"|\\\\|\\.)*\"
whitespace  [ \t\r\n]+
comment1    \/\/.*
operator    (\+|\-|\*|\/|=|%|\+\+|\-\-|==|!=|>|<|>=|<=|&&|\|\|)
keyword     (function|while|for|if|else|continue|break|return|and|or|not|local|true|false|nil)
punctuation (:|\.|\{|\}|\[|\]|\(|\)|;|,)

%%
{keyword} {
    if (!token_string_compare(yytext, "if"))            { insert_token(yylineno, yytext, "KEYWORD IF", "enumerated"); return IF; }
    else if (!token_string_compare(yytext, "else"))     { insert_token(yylineno, yytext, "KEYWORD ELSE", "enumerated"); return ELSE; }
    else if (!token_string_compare(yytext, "while"))    { insert_token(yylineno, yytext, "KEYWORD WHILE", "enumerated"); return WHILE; }
    else if (!token_string_compare(yytext, "for"))      { insert_token(yylineno, yytext, "KEYWORD FOR", "enumerated"); return FOR; }
    else if (!token_string_compare(yytext, "function")) { insert_token(yylineno, yytext, "KEYWORD FUNCTION", "enumerated"); return FUNCTION; }
    else if (!token_string_compare(yytext, "return"))   { insert_token(yylineno, yytext, "KEYWORD RETURN", "enumerated"); return RETURN; }
    else if (!token_string_compare(yytext, "break"))    { insert_token(yylineno, yytext, "KEYWORD BREAK", "enumerated"); return BREAK; }
    else if (!token_string_compare(yytext, "continue")) { insert_token(yylineno, yytext, "KEYWORD CONTINUE", "enumerated"); return CONTINUE; }
    else if (!token_string_compare(yytext, "and"))      { insert_token(yylineno, yytext, "KEYWORD AND", "enumerated"); return AND; }
    else if (!token_string_compare(yytext, "not"))      { insert_token(yylineno, yytext, "KEYWORD NOT", "enumerated"); return NOT; }
    else if (!token_string_compare(yytext, "or"))       { insert_token(yylineno, yytext, "KEYWORD OR", "enumerated"); return OR; }
    else if (!token_string_compare(yytext, "local"))    { insert_token(yylineno, yytext, "KEYWORD LOCAL", "enumerated"); return LOCAL; }
    else if (!token_string_compare(yytext, "true"))     { insert_token(yylineno, yytext, "KEYWORD TRUE", "enumerated"); return TRUE; }
    else if (!token_string_compare(yytext, "false"))    { insert_token(yylineno, yytext, "KEYWORD FALSE", "enumerated"); return FALSE; }
    else if (!token_string_compare(yytext, "nil"))      { insert_token(yylineno, yytext, "KEYWORD NIL", "enumerated"); return NIL; }
    else {
        insert_token(yylineno, yytext, "KEYWORD", "enumerated");
    }
    return 1;
}

{operator} {
    if (!token_string_compare(yytext, "+"))        { insert_token(yylineno, yytext, "OPERATOR PLUS", "enumerated"); return PLUS; }
    else if (!token_string_compare(yytext, "-"))   { insert_token(yylineno, yytext, "OPERATOR MINUS", "enumerated"); return MINUS; }
    else if (!token_string_compare(yytext, "*"))   { insert_token(yylineno, yytext, "OPERATOR MULT", "enumerated"); return MULTIPLY; }
    else if (!token_string_compare(yytext, "/"))   { insert_token(yylineno, yytext, "OPERATOR DIVIDE", "enumerated"); return DIVIDE; }
    else if (!token_string_compare(yytext, "%"))   { insert_token(yylineno, yytext, "OPERATOR MODULO", "enumerated"); return MODULO; }
    else if (!token_string_compare(yytext, "++"))  { insert_token(yylineno, yytext, "OPERATOR PLUS_PLUS", "enumerated"); return PLUS_PLUS; }
    else if (!token_string_compare(yytext, "--"))  { insert_token(yylineno, yytext, "OPERATOR MINUS_MINUS", "enumerated"); return MINUS_MINUS; }
    else if (!token_string_compare(yytext, "="))   { insert_token(yylineno, yytext, "OPERATOR ASSIGNMENT", "enumerated"); return ASSIGNMENT; }
    else if (!token_string_compare(yytext, "=="))  { insert_token(yylineno, yytext, "OPERATOR EQUAL_EQUAL", "enumerated"); return EQUAL_EQUAL; }
    else if (!token_string_compare(yytext, "!="))  { insert_token(yylineno, yytext, "OPERATOR NOT_EQUAL", "enumerated"); return NOT_EQUAL; }
    else if (!token_string_compare(yytext, ">"))   { insert_token(yylineno, yytext, "OPERATOR GREATER_THAN", "enumerated"); return GREATER_THAN;}
    else if (!token_string_compare(yytext, "<"))   { insert_token(yylineno, yytext, "OPERATOR LESS_THAN", "enumerated"); return LESS_THAN; }
    else if (!token_string_compare(yytext, ">="))  { insert_token(yylineno, yytext, "OPERATOR GREATER_EQUAL", "enumerated"); return GREATER_EQUAL; }
    else if (!token_string_compare(yytext, "<="))  { insert_token(yylineno, yytext, "OPERATOR LESS_EQUAL", "enumerated"); return LESS_EQUAL; }
    else if (!token_string_compare(yytext, "&&"))  { insert_token(yylineno, yytext, "OPERATOR AND", "enumerated"); return AND; }
    else if (!token_string_compare(yytext, "||"))  { insert_token(yylineno, yytext, "OPERATOR OR", "enumerated"); return OR; }
    else {
        /* If none of the above operators doesnt match then just store it as a general OPERATOR. */
        insert_token(yylineno, yytext, "OPERATOR", "enumerated");
    }
    return 1;
}

"::" { insert_token(yylineno, yytext, "PUNCTUATION COLON_COLON", "enumerated"); return COLON_COLON; }
".." { insert_token(yylineno, yytext, "PUNCTUATION DOT_DOT", "enumerated"); return DOT_DOT; 

/* due to ascii 46 error for ".." i split these into top level rules */ }


{punctuation} {
    if (!token_string_compare(yytext, "("))       { insert_token(yylineno, yytext, "PUNCTUATION LEFT_PARENTHESIS", "enumerated"); return LEFT_PARENTHESIS; }
    else if (!token_string_compare(yytext, ")"))  { insert_token(yylineno, yytext, "PUNCTUATION RIGHT_PARENTHESIS", "enumerated"); return RIGHT_PARENTHESIS;  }
    else if (!token_string_compare(yytext, "["))  { insert_token(yylineno, yytext, "PUNCTUATION LEFT_BRACKET", "enumerated"); return LEFT_BRACKET; }
    else if (!token_string_compare(yytext, "]"))  { insert_token(yylineno, yytext, "PUNCTUATION RIGHT_BRACKET", "enumerated"); return RIGHT_BRACKET; }
    else if (!token_string_compare(yytext, "{"))  { insert_token(yylineno, yytext, "PUNCTUATION LEFT_BRACE", "enumerated"); return LEFT_BRACE; }
    else if (!token_string_compare(yytext, "}"))  { insert_token(yylineno, yytext, "PUNCTUATION RIGHT_BRACE", "enumerated"); return RIGHT_BRACE; }
    else if (!token_string_compare(yytext, ";"))  { insert_token(yylineno, yytext, "PUNCTUATION SEMICOLON", "enumerated"); return SEMICOLON;}
    else if (!token_string_compare(yytext, "."))  { insert_token(yylineno, yytext, "PUNCTUATION DOT", "enumerated"); return DOT; }
    else if (!token_string_compare(yytext, ":"))  { insert_token(yylineno, yytext, "PUNCTUATION COLON", "enumerated"); return COLON; }
    else if (!token_string_compare(yytext, ","))  { insert_token(yylineno, yytext, "PUNCTUATION COMMA", "enumerated"); return COMMA; }
    else {
        insert_token(yylineno, yytext, "PUNCTUATION", "enumerated");
    }
    return 1;
}

{id}          { yylval.stringValue = strdup(yytext); return IDENTIFIER; }
{intconst}    { yylval.intValue = atoi(yytext); return INTCONST; }
{realconst}   { yylval.realValue = atof(yytext); return REALCONST; }

{string} {
    char *processed_str = strdup(yytext);
    
    // Remove outer quotes
    processed_str[strlen(processed_str) - 1] = '\0';
    memmove(processed_str, processed_str + 1, strlen(processed_str));

    // Replace escape sequences
    for (int i = 0; processed_str[i]; i++) {
        if (processed_str[i] == '\\' && processed_str[i + 1]) {
            char replacement_regex;
            if (processed_str[i + 1] == 't') {
                replacement_regex = '\t';
            } else if (processed_str[i + 1] == 'n') {
                replacement_regex = '\n';
            } else if (processed_str[i + 1] == '"') {
                replacement_regex = '"';
            } else if (processed_str[i + 1] == '\\') {
                replacement_regex = '\\';
            } else {
                // If the escape sequence is unrecognized, leave it as is.
                continue;
            }
            processed_str[i] = replacement_regex;
            memmove(&processed_str[i + 1], &processed_str[i + 2],
                    strlen(&processed_str[i + 2]) + 1);
        }
    }

    insert_token(yylineno, processed_str, "STRING", "char*");
    yylval.stringValue = processed_str;
    return STRING;
}

{comment1}    {insert_token(yylineno, yytext, "COMMENT LINE_COMMENT", "enumerated"); }

"/*" {	
    push(&commentStack, yylineno);
    comment_nested++;
    BEGIN(COMMENT);
}

<COMMENT>"/*" {
    if (commentStack.top != NULL) {
        commentStack.top->has_nested = 1;
    }
    push(&commentStack, yylineno);
    comment_nested++;
}

<COMMENT>. {
}

<COMMENT>"*/" {
    if (comment_nested > 0) {
        int startLine = commentStack.top->line;
        int was_nested = commentStack.top->has_nested;
        pop(&commentStack);
        comment_nested--;

        comment_line_end = yylineno;
        const char* label = (commentStack.top != NULL) ? "Nested Comment" : "Comment";
        int msg_size = snprintf(NULL, 0, "%s %d - %d", label, startLine, comment_line_end) + 1;
        char *comment_msg = (char *)malloc(msg_size);
        if (comment_msg) {
            snprintf(comment_msg, msg_size, "%s %d - %d", label, startLine, comment_line_end);
            insert_token(startLine, comment_msg, "COMMENT BLOCK_COMMENT", "enumerated");
            free(comment_msg);
        }
        if (isStackEmpty(&commentStack)){
            BEGIN(INITIAL);
        }
    }
}           

<COMMENT>\n { 
    comment_line_end = yylineno; 
}

<COMMENT><<EOF>> {
    print_unclosed_comment_error();
    yyterminate();
}

\" {
    push_string(yylineno);
    BEGIN(STRING_MODE);
}

<STRING_MODE>[^"\\\n]+ { yymore(); }
<STRING_MODE>\\.       { yymore(); }

<STRING_MODE>\" {
    int startLine = pop_string();
    if (startLine != -1) {
        char *processed_str = strdup(yytext);
        int len = strlen(processed_str);

        if (len > 0 && processed_str[len - 1] == '"') {
            processed_str[len - 1] = '\0';
        }

        if (processed_str[0] == '"') {
            memmove(processed_str, processed_str + 1, strlen(processed_str));
        }

        for (int i = 0; processed_str[i]; i++) {
            if (processed_str[i] == '\\' && processed_str[i + 1]) {
                char replacement_char;
                if (processed_str[i + 1] == 't') {
                    replacement_char = '\t';
                } else if (processed_str[i + 1] == 'n') {
                    replacement_char = '\n';
                } else if (processed_str[i + 1] == '"') {
                    replacement_char = '"';
                } else if (processed_str[i + 1] == '\\') {
                    replacement_char = '\\';
                } else {
                    continue;
                }
                processed_str[i] = replacement_char;
                memmove(&processed_str[i + 1],
                        &processed_str[i + 2],
                        strlen(&processed_str[i + 2]) + 1);
            }
        }

        insert_token(startLine, processed_str, "STRING", "char*");
        free(processed_str);
    }
    BEGIN(INITIAL);
}

<STRING_MODE>\n {
    int startLine = pop_string();
    if (startLine != -1) {
        int msg_size = snprintf(NULL, 0, "ERROR UNCLOSED STRING AT LINE %d", startLine) + 1;
        char *error_msg = (char *)malloc(msg_size);
        if (error_msg) {
            snprintf(error_msg, msg_size, "ERROR UNCLOSED STRING AT LINE %d", startLine);
            insert_token(startLine, error_msg, "ERROR", "enumerated");
            free(error_msg);
        }
    }
    int c;
    while ((c = input()) != '\n' && c != EOF) {}
    BEGIN(INITIAL);
}

<STRING_MODE><<EOF>> {
    while (!isStringStackEmpty()) {
        int startLine = pop_string();
        if (yyleng > 0 && yytext[yyleng - 1] == '\\') {
            int msg_size = snprintf(NULL, 0, "ERROR UNCLOSED STRING AT LINE %d (trailing backslash)", startLine) + 1;
            char *error_msg = (char *)malloc(msg_size);
            if (error_msg) {
                snprintf(error_msg, msg_size, "ERROR UNCLOSED STRING AT LINE %d (trailing backslash)", startLine);
                insert_token(startLine, error_msg, "ERROR", "enumerated");
                free(error_msg);
            }
        } else {
            int msg_size = snprintf(NULL, 0, "ERROR UNCLOSED STRING AT LINE %d", startLine) + 1;
            char *error_msg = (char *)malloc(msg_size);
            if (error_msg) {
                snprintf(error_msg, msg_size, "ERROR UNCLOSED STRING AT LINE %d", startLine);
                insert_token(startLine, error_msg, "ERROR", "enumerated");
                free(error_msg);
            }
        }
    }
    BEGIN(INITIAL);
    yyterminate();
}

{whitespace}  {  }

.   { 
    int msg_size = snprintf(NULL, 0, "ERROR UNDEFINED CHARACTER AT LINE %d", yylineno) + 1;
    char *error_msg = (char *)malloc(msg_size);
    if (error_msg) {
        snprintf(error_msg, msg_size, "ERROR UNDEFINED CHARACTER AT LINE %d", yylineno);
        insert_token(yylineno, yytext, error_msg, "enumerated");
        free(error_msg);
    }
}

%%

void print_unclosed_comment_error() {
    while (!isStackEmpty(&commentStack)) {
        int startLine = pop(&commentStack);
        int msg_size = snprintf(NULL, 0, "ERROR UNCLOSED COMMENT STARTED AT %d", startLine) + 1;
        char *error_msg = (char *)malloc(msg_size);
        if (error_msg) {
            snprintf(error_msg, msg_size, "ERROR UNCLOSED COMMENT STARTED AT %d", startLine);
            insert_token(startLine, error_msg, "ERROR", "enumerated");
            free(error_msg);
        }
    }
}

void push_string(int line) {
    push(&stringStack, line);
}

int pop_string() {
    return pop(&stringStack);
}

int isStringStackEmpty() {
    return isStackEmpty(&stringStack);
}

void print_unclosed_string_error() {
    while (!isStackEmpty(&stringStack)) {
        int startLine = pop(&stringStack);
        int msg_size = snprintf(NULL, 0, "ERROR UNCLOSED STRING AT LINE %d", startLine) + 1;
        char *error_msg = (char *)malloc(msg_size);
        if (error_msg) {
            snprintf(error_msg, msg_size, "ERROR UNCLOSED STRING AT LINE %d", startLine);
            insert_token(startLine, error_msg, "ERROR", "enumerated");
            free(error_msg);
        }
    }
}
\quads.c
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

#include <stdio.h>
#include <string.h>
#include <stdint.h> // uintptr_t
#include "quads.h"
#include "symbol_table.h"

/* ── forward declarations for helpers used later ── */
static void print_number_to_buf(char *buf, size_t sz, double n);
static const char *bool_str(unsigned char b);
/* ------------------------------------------------------ */

unsigned programVarOffset = 0;
unsigned functionLocalOffset = 0;
unsigned formalArgOffset = 0;
unsigned scopeSpaceCounter = 1;
unsigned total = 0;
unsigned int currQuad = 0;
static unsigned tempcounter = 0;

extern unsigned int checkScope;
extern int yyparse();
extern FILE *yyin;


static struct lc_stack_t *lcs_top = 0;
static struct lc_stack_t *lcs_bottom = 0;

static unsigned loop_id_counter = 1;

unsigned loopcounter(void) {
    if (lcs_top != NULL) {
        return lcs_top->counter;
    } else {
        return 0;
    }
}

/**
 * we made push_loopcounter() and 
 * pop_loopcounter() scope-aware and 
 * we reset when entering/exiting functions
 * in enter_function_scope()
 */


void push_loopcounter(void) {
    struct lc_stack_t* new_node = malloc(sizeof(struct lc_stack_t));
    if (!new_node) {
        debug(1, "Memory allocation failed in push_loopcounter\n");
        exit(EXIT_FAILURE);
    }
    new_node->counter = loop_id_counter++;
    new_node->breaklist = 0;
    new_node->contlist = 0;
    new_node->next = lcs_top;
    lcs_top = new_node;
}

void pop_loopcounter(void) {
    if (!lcs_top) return;
    struct lc_stack_t* temp = lcs_top;
    lcs_top = lcs_top->next;
    free(temp);
}

struct lc_stack_t *current_loop(void) { return lcs_top; }

unsigned int currscope(void) {
    return checkScope;
}

void expand(void) {
    assert(total == currQuad);
    quad *p = NULL;
    
    if (!quads) {
        p = (quad *)malloc(NEW_SIZE);
        if (!p) {
            debug(1, "memory allocation failed in expand\n");
            exit(EXIT_FAILURE);
        }
        total = EXPAND_SIZE;
    }
    else {
        p = (quad *)malloc(NEW_SIZE);
        if (!p) {
            debug(1, "memory allocation failed in expand\n");
            exit(EXIT_FAILURE);
        }
        memcpy(p, quads, CURR_SIZE);
        free(quads);
        total += EXPAND_SIZE;
    }
    quads = p;
}

static const char *op_to_str(iopcode op) {
    static const char *name[] = {
        "assign", "add", "sub", "mul", "idiv", "mod",
        "uminus", "and", "or", "not",
        "if_eq", "if_noteq", "if_lesseq", "if_greatereq", "if_less", "if_greater",
        "jump", "call", "param", "ret", "getretval",
        "funcstart", "funcend", "tablecreate", "tablegetelem", "tablesetelem"
    };

    return name[op];
}

static const char *expr_to_str_buf(expr *e, char *buf, size_t bufsize) {
    if (!e) {
        snprintf(buf, bufsize, "nil");
        return buf;
    }

    /* 1. Types that do not depend on sym */
    switch (e->type) {
        case constnum_e:
            print_number_to_buf(buf, bufsize, e->numConst);
            return buf;
        case conststring_e:
            snprintf(buf, bufsize, "\"%s\"", e->strConst);
            return buf;
        case constbool_e:
            snprintf(buf, bufsize, "%s", bool_str(e->boolConst));
            return buf;
        case nil_e:
            snprintf(buf, bufsize, "NIL");
            return buf;
        default:
            break;
    }
    
    if (!e->sym) {
        snprintf(buf, bufsize, "anonymous");
        return buf;
    }

    switch (e->type) {
    case var_e:
    case tableitem_e:
    case arithexpr_e:
    case assignexpr_e:
        snprintf(buf, bufsize, "%s", e->sym->name);
        break;
    case programfunc_e:
    case libraryfunc_e:
        // snprintf(buf, bufsize, "%s()", e->sym->name);
        snprintf(buf, bufsize, "%s", e->sym->name);
        break;
    case newtable_e:
        snprintf(buf, bufsize, "[table]");
        break;
    default:
        snprintf(buf, bufsize, "UNKNOWN");
        break;
    }
    return buf;
}

void emit(iopcode op, expr *arg1, expr *arg2, expr *result, unsigned label, unsigned line) {
    // Debug output for critical quads
    if (currQuad >= 48 && currQuad <= 55) {
        debug(1, "About to emit quad %d - op: %s\n", currQuad+1, op_to_str(op));
        if (arg1) debug(1, "  arg1 type: %d, addr: %p\n", arg1->type, (void*)arg1);
        if (result) {
            debug(1, "  result type: %d, addr: %p\n", result->type, (void*)result);
            if (result->sym) debug(1, "  result sym: %s\n", result->sym->name);
        }
    }
    
    if (arg1 && !arg1->sym &&
        (arg1->type != constnum_e &&
        arg1->type != conststring_e &&
        arg1->type != constbool_e &&
        arg1->type != newtable_e)) {
        debug(1, "Warning: Expression without symbol (type %d) at line %d\n", arg1->type, line);
        arg1->sym = newtemp();
    }

    if (arg2 && !arg2->sym &&
        (arg2->type != constnum_e &&
        arg2->type != conststring_e &&
        arg2->type != constbool_e &&
        arg2->type != newtable_e)) { 
        debug(1, "Warning: Expression without symbol (type %d) at line %d\n", arg2->type, line);
        arg2->sym = newtemp();
    }

    if (result && !result->sym) {
        // let's only warn if it's not an arithmetic or assign expression since temp results are expected here
        if (result->type != arithexpr_e 
            && result->type != assignexpr_e 
            && result->type != var_e 
            && result->type != boolexpr_e
            && result->type != tableitem_e && result->type != newtable_e) {
                    debug(1, "Warning: Result without symbol (type %d) at line %d\n", result->type, line);
        }
    result->sym = newtemp();
    }
    
    // Special handling for boolean expressions in assign operations
    if (op == assign && arg1 && arg1->type == boolexpr_e) {
        // If the boolean expression doesn't have a symbol, create a temporary one
        if (!arg1->sym) {
            debug(1, "Warning: Boolean expression without symbol in assign operation (line %d)\n", line);
            
            // Create a new temporary expression with a symbol
            expr *temp = newexpr(var_e);
            temp->sym = newtemp();
            
            // Create a boolean constant to assign to the temporary
            expr *boolval = newexpr_constbool(0);
            
            // Emit a separate quad for this assignment
            if (currQuad < total) {
                quad *q = quads + currQuad++;
                q->op = assign;
                q->arg1 = boolval;
                q->arg2 = NULL;
                q->result = temp;
                q->label = 0;
                q->line = line;
            }
            
            // Use this temporary instead of the original arg1
            arg1 = temp;
        }
    }
    
    // Safety check for NULL or nil expressions in critical operations
    if ((op == if_eq || op == if_noteq || op == if_lesseq || op == if_greatereq || 
         op == if_less || op == if_greater) && 
        (arg1 == NULL || arg2 == NULL || 
         (arg1 && arg1->type == nil_e) || 
         (arg2 && arg2->type == nil_e))) {
        debug(1, "Warning: Skipping unsafe boolean operation at line %d\n", line);
        return; // Skip this quad entirely
    }

    // Check for required arguments based on opcode
    switch (op) {
        // Operations requiring result
        case assign:
        case add:
        case sub:
        case mul:
        case idiv:
        case mod:
        case uminus:
        case and:
        case or:
        case not:
        case getretval:
            if (result == NULL) {
                debug(1, "Error: NULL result in emit() for opcode that requires result (line %d)\n", line);
                return;
            }
            break;
        case tablecreate:
        case tablegetelem:
            if (result == NULL) {
                debug(1, "Error: NULL result in emit() for opcode that requires result (line %d)\n", line);
                return;
            }
            break;
        // Operations requiring arg1
        case if_eq:
        case if_noteq:
        case if_lesseq:
        case if_greatereq:
        case if_less:
        case if_greater:
        case param:
        case call:
            if (arg1 == NULL) {
                debug(1, "Error: NULL arg1 in emit() for opcode that requires arg1 (line %d)\n", line);
                return;
            }
            break;
        // Operations requiring both arg1 and arg2
        case tablesetelem:
            if (arg1 == NULL || arg2 == NULL) {
                fprintf(stderr, "Error: NULL arg1 or arg2 in emit() for opcode that requires both (line %d)\n", line);
                return;
            }
            break;
        default:
            break;
    }

    // ensure we have space for the new quad
    if (currQuad == total)
        expand();

    // create the new quad
    quad *q = quads + currQuad++;
    q->op = op;
    if (op == tablesetelem) {
        q->arg1 = arg2;  // index
        q->arg2 = arg1;  // value
    } else {
        q->arg1 = arg1;
        q->arg2 = arg2;
    }
    q->result = result;
    q->label = label;
    q->line = line;
}

unsigned nextquad(void) {
    return currQuad;
}

void patchlabel(unsigned quadNo, unsigned label) {
    // Add comprehensive safety checks
    if (quadNo >= currQuad) {
        fprintf(stderr, "Error: patchlabel: quadNo (%u) >= currQuad (%u) at line %d\n", quadNo, currQuad, yylineno);
        return;
    }
    
    // Make sure quads array is valid
    if (!quads) {
        fprintf(stderr, "Error: quads array is NULL in patchlabel\n");
        return;
    }
    
    debug(1, "Patching quad %u with label %u\n", quadNo, label);
    quads[quadNo].label = label;
}

/* Scoping */

scopespace_t currscopespace(void) {
    if (scopeSpaceCounter == 1) {
        return programvar;
    } else if (scopeSpaceCounter % 2 == 0) {
        return formalarg;
    } else {
        return functionlocal;
    }
}

unsigned currscopeoffset(void) {
    switch (currscopespace())
    {
    case programvar:
        return programVarOffset;
    case functionlocal:
        return functionLocalOffset;
    case formalarg:
        return formalArgOffset;
    default:
        assert(0);
    }
}

void inccurrscopeoffset(void) {
    switch (currscopespace())
    {
    case programvar:
        ++programVarOffset;
        break;
    case functionlocal:
        ++functionLocalOffset;
        break;
    case formalarg:
        ++formalArgOffset;
        break;
    default:
        assert(0);
    }
}

void enterscopespace(void) {
    ++scopeSpaceCounter;
}

void exitscopespace(void) {
    assert(scopeSpaceCounter > 1);
    --scopeSpaceCounter;
}

/* Expressions */

expr *newexpr(expr_t t) {
    expr *e = (expr *)malloc(sizeof(expr));
    if (!e) {
        fprintf(stderr, "Out of memory\n");
        exit(EXIT_FAILURE);
    }
    memset(e, 0, sizeof(expr));
    e->type = t;
    e->sym = NULL;
    
    // for nil expressions, ensure they have safe default values
    if (t == nil_e) {
        e->sym = newtemp();
    }
    // FOR newtable_e, ALWAYS ASSIGN A SYMBOL!
    if (t == newtable_e) {
        e->sym = newtemp();
    }
    return e;
}

expr *newexpr_constnum(double i) {
    expr *e = newexpr(constnum_e);
    e->numConst = i;
    return e;
}

expr* newexpr_conststring(char* s) {
    if (!s || ((uintptr_t)s) < 0x1000) { // Super-low address = likely error
        fprintf(stderr, "BUG: newexpr_conststring called with bad pointer %p\n", s);
        exit(1); // or exit(1)
    }
    expr* e = newexpr(conststring_e);
    e->strConst = strdup(s);
    return e;
}


expr *newexpr_constbool(unsigned int b) {
    expr *e = newexpr(constbool_e);
    e->boolConst = !!b;
    // make sure it has a symbol to prevent issues
    if (!e->sym) {
        e->sym = newtemp();
    }
    return e;
}

char *newtempname(void) {
    char *name = malloc(16);
    sprintf(name, "_t%u", tempcounter++);
    return name;
}

SymbolTableEntry *newtemp(void) {
    char *name = newtempname();
    SymbolTableEntry *sym = lookup_symbol(symbol_table, name, currscope(), 0);
    if (!sym)
    {
        insert_symbol(symbol_table, name, TEMP_VAR, yylineno, currscope());
        sym = lookup_symbol(symbol_table, name, currscope(), 0);
    }
    return sym;
}

void resettemp(void) {
    tempcounter = 0;
}

unsigned int istempname(char *s) {
    return *s == '_';
}

unsigned int istempexpr(expr *e) {
    return e && e->sym && istempname(e->sym->name);
}

expr *lvalue_expr(SymbolTableEntry *sym) {
    if (!sym) {
        fprintf(stderr, "FATAL: NULL symbol passed to lvalue_expr (likely undeclared variable) at line %d\n", yylineno);
        assert(0);
    }
    expr *e = newexpr(var_e);
    e->sym = sym;

    switch (sym->type) {
        case GLOBAL:
        case LOCAL_VAR:
        case ARGUMENT:
        case TEMP_VAR:
            e->type = var_e;
            break;
        case USER_FUNCTION:
            e->type = programfunc_e;
            break;
        case LIBRARY_FUNCTION:
            e->type = libraryfunc_e;
            break;
        default:
            fprintf(stderr, "Error: Unknown symbol type %d for symbol '%s' at line %d\n", sym->type, sym->name, sym->line_number);
            assert(0); // for debugging
    }

    return e;
}

/* Helper function to emit PARAM quads right-to-left */
static void emit_params_rev(expr *p) {
    if (!p) return;
    emit_params_rev(p->next);           /* go to list tail first */
    emit(param, p, NULL, NULL, 0, yylineno);
}

/* added make_call_expr & create_expr_list (not sure if they can be replaced by existing functions) */
expr *make_call_expr(expr *func_expr, expr *args) {
    
    func_expr = emit_iftableitem(func_expr);

    /* Defensive check for NULL function expression */
    if (!func_expr) {
        fprintf(stderr, "Warning: NULL function expression in make_call_expr\n");
        return newexpr(nil_e);
    }

    /* Create a new call expression */
    expr *call_expr = newexpr(call_e);

    /* Safely copy the symbol if available */
    if (func_expr->sym) {
        call_expr->sym = func_expr->sym;
    } else {
        /* Create a temporary symbol if none exists */
        call_expr->sym = newtemp();
        fprintf(stderr, "Warning: Function expression has no symbol, created temp\n");
    }

    /* Safely handle arguments */
    call_expr->args = args;

    /* ---------------------- new -------------------------- */
    emit_params_rev(args);

    emit(call, func_expr, NULL, NULL, 0, yylineno);   /* emit CALL quad */

    /* generate a temp to hold the return value */
    expr *retval = newexpr(var_e);
    retval->sym  = newtemp();

    emit(getretval, NULL, NULL, retval, 0, yylineno); /* emit GETRETVAL quad */

    /* ------------------------------------------------------------ */

    /* return the expression that represents the call’s value */
    return retval;
}

expr *create_expr_list(expr *head, expr *tail) {
    if (!head) {
        return tail;
    }
    head->next = tail;
    return head;
}

expr *emit_iftableitem(expr *e) {
    if (!e) {
        fprintf(stderr, "FATAL: NULL expr passed to emit_iftableitem!\n");
        return newexpr(nil_e); // Return safe nil instead of exiting
    }

    // Skip invalid expressions
    if ((uintptr_t)e < 4096 || ((uintptr_t)e & 0xF) != 0) {
        fprintf(stderr, "FATAL: Invalid expr pointer: %p\n", (void *)e);
        return newexpr(nil_e); // Return safe nil instead of exiting
    }

    if (e->type != tableitem_e) {
        return e;
    }

    if (!e->index) {
        fprintf(stderr, "FATAL: expr->index is NULL in emit_iftableitem!\n");
        return newexpr(nil_e); // Return safe nil instead of exiting
    }

    if (e->next) {  // to avoid duplicate quad // added this 
        return e->next;
    }

    expr *table = emit_iftableitem(e->table);   // for nested tableitem_e

    expr *result = newexpr(var_e);
    result->sym = newtemp();
    // emit(tablegetelem, e, e->index, result, 0, yylineno);
    emit(tablegetelem, table, e->index, result, 0, yylineno);


    e->next = result; // added this to memoize
    return result;
}

/* Break / Continue management */

int newlist(int quadNo) {
    quads[quadNo].label = 0;
    return quadNo;
}

int mergelist(int l1, int l2) {
    if (!l1){
        return l2;
    }
    if (!l2){
        return l1;
    }
    int i = l1;
    while (quads[i].label){
        i = quads[i].label;
    }
    quads[i].label = l2;
    return l1;
}

void patchlist(int list, int label) {
    while (list) {
        int next = quads[list].label;
        quads[list].label = label;
        list = next;
    }
}

void make_stmt(stmt_t *s) {
    s->breaklist = s->contlist = 0;
}


static void print_number(FILE *f, double n) {
    double diff = n - (long)n;          /* cheap fabs */
    if (diff < 0) diff = -diff;

    if (diff < 0.0000001)
        fprintf(f, "%ld", (long)n);
    else
        fprintf(f, "%.2f", n);
}

static void print_number_to_buf(char *buf, size_t sz, double n) {
    double diff = n - (long)n;
    if (diff < 0) diff = -diff;

    if (diff < 0.0000001)
        snprintf(buf, sz, "%ld", (long)n);
    else
        snprintf(buf, sz, "%.2f", n);
}

static const char *bool_str(unsigned char b) {   /* inlineable */
    return b ? "TRUE" : "FALSE";
}

static void print_expr(FILE *f, expr *e) {
    if (!e) {
        fprintf(f, "nil");
        return;
    }

    // Handle nil_e expressions specially
    if (e->type == nil_e) {
        fprintf(f, "NIL");
        return;
    }

    /* 2. Types that do not depend on sym */
    switch (e->type) {
    case constnum_e:
        print_number(f, e->numConst);
        return;
    case conststring_e:
        fprintf(f, "\"%s\"", e->strConst);
        return;
    case constbool_e:
        fprintf(f, "%s", bool_str(e->boolConst));
        return;
    case nil_e:
        fprintf(f, "NIL");
        return;
    default:
        break;
    }

    if (!e->sym){ 
        fprintf(f, "anonymous");
        return;
    }

    switch (e->type) {
    case var_e:
    case tableitem_e:
    case arithexpr_e:
    case assignexpr_e:
        fprintf(f, "%s", e->sym->name);
        break;

    case programfunc_e:
    case libraryfunc_e:
        // fprintf(f, "%s()", e->sym->name);
        fprintf(f, "%s", e->sym->name);
	break;

    case newtable_e:
        fprintf(f, "[table]");
        break;

    default:
        fprintf(f, "UNKNOWN");
        break;
    }
}

void print_quads(FILE *f) {
    fprintf(f, "------------------------------ Intermediate Code ------------------------------\n");

    for (unsigned i = 0; i < currQuad; ++i) {
        quad *q = quads + i;
        fprintf(f, "%-3u: ", i + 1);

        switch (q->op) {
            case assign:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                break;
            case add:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " + ");
                print_expr(f, q->arg2);
                break;
            case sub:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " - ");
                print_expr(f, q->arg2);
                break;
            case mul:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " * ");
                print_expr(f, q->arg2);
                break;
            case idiv:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " / ");
                print_expr(f, q->arg2);
                break;
            case mod:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " %% ");
                print_expr(f, q->arg2);
                break;
            case uminus:
                print_expr(f, q->result);
                fprintf(f, " := -");
                print_expr(f, q->arg1);
                break;
            case and:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " and ");
                print_expr(f, q->arg2);
                break;
            case or:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, " or ");
                print_expr(f, q->arg2);
                break;
            case not:
                print_expr(f, q->result);
                fprintf(f, " := not ");
                print_expr(f, q->arg1);
                break;
            case if_eq:
                fprintf(f, "IF ");
                print_expr(f, q->arg1);
                fprintf(f, " == ");
                print_expr(f, q->arg2);
                fprintf(f, " THEN jump to %u", q->label + 1);

                break;
            case if_noteq:
                fprintf(f, "IF ");
                print_expr(f, q->arg1);
                fprintf(f, " != ");
                print_expr(f, q->arg2);
                fprintf(f, " THEN jump to %u", q->label + 1);

                break;
            case if_lesseq:
                fprintf(f, "IF ");
                print_expr(f, q->arg1);
                fprintf(f, " <= ");
                print_expr(f, q->arg2);
                fprintf(f, " THEN jump to %u", q->label + 1);

                break;
            case if_greatereq:
                fprintf(f, "IF ");
                print_expr(f, q->arg1);
                fprintf(f, " >= ");
                print_expr(f, q->arg2);
                fprintf(f, " THEN jump to %u", q->label + 1);

                break;
            case if_less:
                fprintf(f, "IF ");
                print_expr(f, q->arg1);
                fprintf(f, " < ");
                print_expr(f, q->arg2);
                fprintf(f, " THEN jump to %u", q->label + 1);

                break;
            case if_greater:
                fprintf(f, "IF ");
                print_expr(f, q->arg1);
                fprintf(f, " > ");
                print_expr(f, q->arg2);
                fprintf(f, " THEN jump to %u", q->label + 1);

                break;
            case call:
                fprintf(f, "CALL ");
                print_expr(f, q->arg1);
                break;
            case param:
                fprintf(f, "PARAM ");
                print_expr(f, q->arg1);
                break;
            case ret:
                fprintf(f, "RETURN ");
                print_expr(f, q->arg1);
                break;
            case getretval:
                print_expr(f, q->result);
                fprintf(f, " := RETVAL");
                break;
            case funcstart:
                fprintf(f, "FUNCSTART ");
                print_expr(f, q->result);
                break;
            case funcend:
                fprintf(f, "FUNCEND ");
                print_expr(f, q->result);
                break;
            case tablecreate:
                print_expr(f, q->result);
                fprintf(f, " := TABLECREATE");
                break;
            case tablegetelem:
                print_expr(f, q->result);
                fprintf(f, " := ");
                print_expr(f, q->arg1);
                fprintf(f, "[");
                print_expr(f, q->arg2);
                fprintf(f, "]");
                break;
            case tablesetelem:
                print_expr(f, q->arg1);
                fprintf(f, "[");
                print_expr(f, q->arg2);
                fprintf(f, "] := ");
                print_expr(f, q->result);
                break;
            case jump:
                fprintf(f, "jump to %u", q->label + 1);
                break;
            default:
                fprintf(f, "[Unknown opcode]");
                break;
        }

        fprintf(f, "\n");
    }

    fprintf(f, "\n%-6s %-12s %-20s %-20s %-20s %-5s\n", "quad#", "opcode", "result", "arg1", "arg2", "label");

    for (unsigned i = 0; i < currQuad; ++i) {
        quad *q = quads + i;

        char res_buf[64], arg1_buf[64], arg2_buf[64];
        const char *res_str  = q->result ? expr_to_str_buf(q->result, res_buf, sizeof(res_buf)) : "nil";
        const char *arg1_str = q->arg1   ? expr_to_str_buf(q->arg1, arg1_buf, sizeof(arg1_buf)) : "nil";
        const char *arg2_str = q->arg2   ? expr_to_str_buf(q->arg2, arg2_buf, sizeof(arg2_buf)) : "nil";

        fprintf(f, "%-6u %-12s %-20s %-20s %-20s %-5u   [line %u]\n",
            i + 1,
            op_to_str(q->op),
            res_str,
            arg1_str,
            arg2_str,
            q->label ? q->label + 1 : 0,
            q->line
        );
    }
}

expr* convert_to_value(expr* bool_expr) {
    if (bool_expr->type != boolexpr_e){
        return bool_expr;
    }
    expr* result = newexpr(var_e);
    result->sym = newtemp();

    unsigned trueLabel = nextquad();
    emit(assign, newexpr_constbool(1), NULL, result, 0, yylineno);

    unsigned jumpLabel = nextquad();
    emit(jump, NULL, NULL, NULL, 0, yylineno);

    unsigned falseLabel = nextquad();
    emit(assign, newexpr_constbool(0), NULL, result, 0, yylineno);

    patchlist(bool_expr->truelist, trueLabel);
    patchlist(bool_expr->falselist, falseLabel);
    patchlabel(jumpLabel, nextquad());

    return result;
}

expr* convert_to_bool(expr* e) {
    if (e->type == boolexpr_e) return e;

    expr* bool_expr = newexpr(boolexpr_e);
    emit(if_eq, e, newexpr_constbool(1), NULL, nextquad() + 2, yylineno);
    emit(jump, NULL, NULL, NULL, nextquad() + 2, yylineno);

    bool_expr->truelist = newlist(nextquad() - 2);
    bool_expr->falselist = newlist(nextquad() - 1);
    return bool_expr;
}

expr* make_not(expr* e) {
    if (e->type != boolexpr_e){
        e = convert_to_bool(e);  // emits if_eq/jump to produce true/false lists
    }
    expr* r = newexpr(boolexpr_e);
    r->truelist = e->falselist;
    r->falselist = e->truelist;
    return r;
}

expr *make_or(expr *e1, expr *e2) {
    /* ensure operands carry truelist / falselist */
    if (e1->type != boolexpr_e)  e1 = convert_to_bool(e1);
    if (e2->type != boolexpr_e)  e2 = convert_to_bool(e2);

    patchlist(e1->falselist, nextquad());   /* e1 false → evaluate e2 */

    expr *r = newexpr(boolexpr_e);
    r->truelist  = mergelist(e1->truelist, e2->truelist);
    r->falselist = e2->falselist;
    return r;
}

expr *make_and(expr *e1, expr *e2) {
    if (e1->type != boolexpr_e)  e1 = convert_to_bool(e1);
    if (e2->type != boolexpr_e)  e2 = convert_to_bool(e2);

    patchlist(e1->truelist, nextquad());    /* e1 true  → evaluate e2 */

    expr *r = newexpr(boolexpr_e);
    r->truelist  = e2->truelist;
    r->falselist = mergelist(e1->falselist, e2->falselist);
    return r;
}

expr* make_eq_neq(expr* e1, expr* e2, iopcode op) {
    if (!e1) e1 = newexpr(nil_e);
    if (!e2) e2 = newexpr(nil_e);

    if (e1->type == boolexpr_e){
        e1 = convert_to_value(e1);
    }
    if (e2->type == boolexpr_e){
        e2 = convert_to_value(e2);
    }
    expr* r = newexpr(boolexpr_e);
    r->sym = newtemp();

    if (e1->type == nil_e || e2->type == nil_e) {
        emit(assign, newexpr_constbool(0), NULL, r, 0, yylineno);
    } else {
        emit(op, e1, e2, NULL, nextquad() + 2, yylineno);
        emit(jump, NULL, NULL, NULL, nextquad() + 1, yylineno);

        r->truelist = newlist(nextquad() - 2);
        r->falselist = newlist(nextquad() - 1);
    }
    return r;
}
\symbol_table.h
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

#ifndef SYMBOL_TABLE_H
#define SYMBOL_TABLE_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct expr;

typedef enum {
    GLOBAL,
    LOCAL_VAR,
    ARGUMENT,
    LIBRARY_FUNCTION,
    USER_FUNCTION,
    TEMP_VAR 
} SymbolType;

typedef enum scopespace_t { 
    programvar, 
    functionlocal, 
    formalarg 
} scopespace_t;

typedef enum symbol_t { 
    var_s, 
    programfunc_s, 
    libraryfunc_s 
} symbol_t; 

typedef struct SymbolTableEntry {
    char *name;
    SymbolType type;
    unsigned int line_number;
    unsigned int scope;
    int is_active;
    struct SymbolTableEntry *next;
    
    scopespace_t space;             // Originating scope space. 
    unsigned int offset;            // Offset in scope space.

} SymbolTableEntry;

typedef struct SymbolTable {
    SymbolTableEntry *head;
} SymbolTable;

SymbolTable *create_symbol_table();
SymbolTableEntry *create_entry(const char *name, SymbolType type, unsigned int line, unsigned int scope);
SymbolTableEntry* insert_symbol(SymbolTable *table, const char *name, SymbolType type, unsigned int line, unsigned int scope);
SymbolTableEntry *lookup_symbol(SymbolTable *table, const char *name, unsigned int scope, int is_function_context);
SymbolTableEntry *lookup_symbol_global(SymbolTable *table, const char *name);
void print_symbol_table(SymbolTable *table);
void free_symbol_table(SymbolTable *table);
void deactivate_entries_from_curr_scope(SymbolTable*, unsigned int scope);

void comperror(char* format, ...);
void check_arith(struct expr* e, const char* context);

#endif

\symbol_table.c
/**
 * HY-340 Project Phase 3 2024-2025
 *
 * Members:
 *      csd5171 Fytaki Maria
 *      csd5310 Rafail Drakakis
 *      csd5082 Theologos Kokkinellis
 */

#include "symbol_table.h"
#include "quads.h" 

static const char *get_symbol_type_str(SymbolType symbol_type) {
    switch (symbol_type) {
        case GLOBAL:            return "global variable";
        case LOCAL_VAR:         return "local variable";
        case ARGUMENT:          return "formal argument";
        case LIBRARY_FUNCTION:  return "library function";
        case USER_FUNCTION:     return "user function";
        case TEMP_VAR:          return "temporary variable";
        default:                return "unknown";
    }
}

SymbolTable *create_symbol_table() {
    SymbolTable *table = (SymbolTable *)malloc(sizeof(SymbolTable));
    if (!table) {
        fprintf(stderr, "Memory allocation failed for Symbol Table.\n");
        exit(EXIT_FAILURE);
    }
    table->head = NULL;
    return table;
}

SymbolTableEntry *create_entry(const char *name, SymbolType type, unsigned int line, unsigned int scope) {
    SymbolTableEntry *entry = (SymbolTableEntry *)malloc(sizeof(SymbolTableEntry));
    if (!entry) {
        fprintf(stderr, "Memory allocation failed for Symbol Table Entry.\n");
        exit(EXIT_FAILURE);
    }
    entry->name = strdup(name);
    entry->type = type;
    entry->line_number = line;  
    entry->scope = scope;
    entry->next = NULL;
    return entry;
}

/* Search from scope-1 to 0 for a variable with the same name */
static SymbolTableEntry *lookup_visible_var(SymbolTable *symbol_table, const char *name, unsigned scope) {
    for (int s = (int)scope - 1; s >= 0; --s)
        for (SymbolTableEntry *current = symbol_table->head; current; current = current->next)
            if (current->scope == (unsigned)s &&
                (current->type == GLOBAL || current->type == LOCAL_VAR || current->type == ARGUMENT) && strcmp(current->name, name) == 0)
                return current;
    return NULL;
}

/* modified insert_symbol: from void to SymbolTableEntry to store entries and use them from funcdef in call */
SymbolTableEntry* insert_symbol(SymbolTable *symbol_table, const char *name, SymbolType type, unsigned int line, unsigned int scope) {

    if (type == LOCAL_VAR) {                               
        if (lookup_visible_var(symbol_table, name, scope))          
            return NULL;                                        
    }

    /* note: are the {} correct ? */
    for (SymbolTableEntry *current = symbol_table->head; current; current = current->next)
        if (current->scope == scope && strcmp(current->name, name) == 0) {
            int allow_duplicate = (current->type == ARGUMENT && type == ARGUMENT && current->line_number != line);
            if (!allow_duplicate) {
                fprintf(stderr, "Error: Symbol '%s' already defined in scope %u at line %u.\n", name, scope, line);
                return NULL;
            }
        }

        if (scope != 0) {
            SymbolTableEntry *global_entry = lookup_symbol_global(symbol_table, name);
            if (global_entry && global_entry->type == LIBRARY_FUNCTION) {
                fprintf(stderr, "Error: Cannot redeclare library function '%s' (line %u).\n", name, line);
                return NULL;
            }
        }

        SymbolTableEntry *new_entry = create_entry(name, type, line, scope);

        if (!symbol_table->head) symbol_table->head = new_entry;
        else {
            SymbolTableEntry *current = symbol_table->head;
            while (current->next) current = current->next;
            current->next = new_entry;
        }

	return new_entry;
}

SymbolTableEntry *lookup_symbol(SymbolTable *symbol_table, const char *name, unsigned int current_scope, int is_function_context) {
    for (int scope = (int)current_scope; scope >= 0; --scope)
        for (SymbolTableEntry *current = symbol_table->head; current; current = current->next)
            if (current->scope == (unsigned)scope && strcmp(current->name, name) == 0) {

                if (current->type == USER_FUNCTION || current->type == LIBRARY_FUNCTION)
                    return current;

                if (current->type == GLOBAL || current->type == LOCAL_VAR || current->type == ARGUMENT) {

                    if (scope == (int)current_scope || scope == 0)
                        return current;

                    if (is_function_context) {
                        int other_scope = 0;
                        for (int t = (int)current_scope; t > scope && !other_scope; --t)
                            for (SymbolTableEntry *x = symbol_table->head; x; x = x->next)
                                if (x->scope == (unsigned)t && x->type == USER_FUNCTION) {
                                    other_scope = 1; break;
                                }
                        if (!other_scope) return current;
                        printf("Error: Symbol '%s' defined at line %u in enclosing function.\n", current->name, current->line_number);
                    }
                }
            }
    return NULL;
}

SymbolTableEntry *lookup_symbol_global(SymbolTable *table, const char *name) {
    SymbolTableEntry *current = table->head;
    while (current) {
        if (strcmp(current->name, name) == 0 && current->scope == 0) {
            return current;
        }
        current = current->next;
    }
    return NULL;
}

static int compare_by_line(const void *a, const void *b) {
    const SymbolTableEntry *entry_a = *(const SymbolTableEntry * const *)a;
    const SymbolTableEntry *entry_b = *(const SymbolTableEntry * const *)b;
    if (entry_a->line_number < entry_b->line_number) return -1;
    if (entry_a->line_number > entry_b->line_number) return  1;
    return 0;
}

void print_symbol_table(SymbolTable *symbol_table) {
    unsigned int max_scope = 0;
    for (SymbolTableEntry *current = symbol_table->head; 
        current; current = current->next)
        if (current->scope > max_scope) 
        max_scope = current->scope;

    for (unsigned int scope = 0; scope <= max_scope; ++scope) {
        size_t num_entries = 0;
        for (SymbolTableEntry *current = symbol_table->head; current; current = current->next)
            if (current->scope == scope) ++num_entries;
        if (!num_entries) continue;

        SymbolTableEntry **entries_array = malloc(num_entries * sizeof *entries_array);
        size_t i = 0;
        for (SymbolTableEntry *current = symbol_table->head; current; current = current->next)
            if (current->scope == scope) entries_array[i++] = current;

        qsort(entries_array, num_entries, sizeof *entries_array, compare_by_line);

        printf("-----------     Scope #%u     -----------\n", scope);
        for (i = 0; i < num_entries; ++i)
            printf("\"%s\" [%s] (line %u) (scope %u)\n",
                   entries_array[i]->name, get_symbol_type_str(entries_array[i]->type),
                   entries_array[i]->line_number, entries_array[i]->scope);
        putchar('\n');

        free(entries_array);
    }
}

void deactivate_entries_from_curr_scope(SymbolTable *symbol_table, unsigned int scope) {
    SymbolTableEntry *current = symbol_table->head, *previous = NULL;
    while (current) {
        int removable = (current->scope == scope) &&
                        current->type != USER_FUNCTION &&
                        current->type != LOCAL_VAR   &&
                        current->type != ARGUMENT;

        if (removable && scope != 0 && current->type != LIBRARY_FUNCTION) {
            SymbolTableEntry *entry_to_delete = current;
            if (!previous) symbol_table->head = current->next;
            else previous->next = current->next;
            current = current->next;
            free(entry_to_delete->name); 
            free(entry_to_delete);
        } else { previous = current; current = current->next; }
    }
}

void free_symbol_table(SymbolTable *symbol_table) {
    SymbolTableEntry *current = symbol_table->head;
    while (current) { 
        SymbolTableEntry *next = current->next; 
        free(current->name); 
        free(current); current = next; 
    }
    free(symbol_table);
}

/* based on lec 10 slide 32 (custom) */

void comperror(char* format, ...) {             
    va_list args;
    va_start(args, format);

    fprintf(stderr, "Compiler Error: ");
    vfprintf(stderr, format, args);
    fprintf(stderr, "\n");

    va_end(args);
    exit(EXIT_FAILURE);
}

/**
 * Use this function to check correct use of of expression in arithmetic 
 */

void check_arith (expr* e, const char* context) {
    if ( e->type == constbool_e ||
    e->type == conststring_e    ||
    e->type == nil_e            ||
    e->type == newtable_e       ||
    e->type == programfunc_e    ||
    e->type == libraryfunc_e    ||
    e->type == boolexpr_e )
    comperror("Illegal expr used in %s!", context); 
}

